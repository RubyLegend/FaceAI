#!/usr/bin/env python3

import sys  # args
import os  # Environment variables
# Suppressing logging of OpenCV

os.environ['OPENCV_LOG_LEVEL'] = 'OFF'

from PySide2 import QtWidgets
from PySide2.QtWidgets import QListWidgetItem
from designs.ui_MainWindow import Ui_MainWindow
from designs.ui_ErrorWindow import Ui_ErrorWindow
from designs.ui_VideoPreviewWindow import Ui_VideoPreviewWindow
from core.CameraUtils import enumerateCameras, openCameraFeed, errorSignal, fillCameraList
# Creating all windows
app = QtWidgets.QApplication()
MainWindow = Ui_MainWindow()
ErrorWindow = Ui_ErrorWindow()
VideoPreviewWindow = Ui_VideoPreviewWindow()


# Error window setup
def showError(message: str):
    ErrorWindow.ErrorMessage.setText(message)
    ErrorWindow.show()


def fillCameraListHandler():
    fillCameraList(MainWindow.CameraList)


def showVideoHandler(camera):
    openCameraFeed(camera, VideoPreviewWindow, app)


# Load all windows
MainWindow.setupUi(MainWindow)
MainWindow.CameraList.itemDoubleClicked.connect(showVideoHandler)
MainWindow.RefreshButton.clicked.connect(fillCameraListHandler)

ErrorWindow.setupUi(ErrorWindow)
errorSignal.errorSignal.connect(showError)

VideoPreviewWindow.setupUi(VideoPreviewWindow)

# Main function
if __name__ == "__main__":
    MainWindow.show()
    fillCameraListHandler()
    sys.exit(app.exec_())
